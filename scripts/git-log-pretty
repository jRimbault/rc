#!/usr/bin/env bash

# Control character, this is not a space, it's an EM SPACE
# U+2003
CCHAR=' '
# u+2007
CDATE=' '

# Log output:
#
# * 51c333e  12 days  Gary Bernhardt   add vim-eunuch
#
# The time massaging regexes start with ^[^$CCDATE]* because that ensures that they
# only operate before the first "$CCDATE". That "$CCDATE" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses $CCHAR characters between each field, and `column` is later
# used to split on them. A $CCHAR in the commit subject or any other field will
# break this.

LOG_HASH="%C(always,red)%h%C(always,reset)"
LOG_RELATIVE_TIME="%C(always,green)%ar$CDATE%C(always,reset)"
LOG_AUTHOR="%C(always,blue)%an%C(always,reset)"
LOG_SUBJECT="%s"
LOG_REFS="%C(always,yellow)%d%C(always,reset)"

LOG_FORMAT="$LOG_HASH$CCHAR$LOG_RELATIVE_TIME$CCHAR$LOG_AUTHOR$CCHAR$LOG_SUBJECT$LOG_REFS"

pretty_git_log()
{
  git log \
    --graph \
    --pretty="tformat:$LOG_FORMAT" $* |
    pretty_git_format |
    git_page_maybe
}

pretty_git_format()
{
  # Replace (2 years ago) with (2 years)
  sed -Ee "s/(^[^$CDATE]*) ago$CDATE/\\1$CDATE/" |
  # Replace (2 years, 5 months) with (2 years)
  sed -Ee "s/(^[^$CDATE]*), [[:digit:]]+ .*months?$CDATE/\\1/" |
  sed "s/$CDATE//" |
  # Line columns up based on } delimiter
  column -s "$CCHAR" -t
}

git_page_maybe()
{
  # Page only if we're asked to.
  if [ -n "$GIT_NO_PAGER" ]; then
    cat
  else
    # Page only if needed.
    less --quit-if-one-screen --no-init --RAW-CONTROL-CHARS --chop-long-lines
  fi
}


# do not execute script if it is sourced or downloaded-piped to bash
if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  pretty_git_log "$@"
fi
