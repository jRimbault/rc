#!/usr/bin/env python3

import argparse
import json
import os
from datetime import datetime, timedelta

""" Tells you when to leave work.

Assumes a 5 days, 35-hour workweek with mandatory 45 minutes of pause each day.

First argument is when you arrived.
Second argument is when you left.
Third argument is your pause duration.

If only given one argument, it assumes a 45 minute pause and 7 hours of work
and shows you when you should leave.

If given two arguments, it assumes a 45 minute pause and shows you how many
hours you'll be working.

If given three arguments, it shows you how many hours you'll be working.

Examples :
$ worktime 8:00 # or worktime 8
15:45:00
$ worktime 8:00 16:00 # worktime 8 16
7:15:00
$ worktime 8 16 1
7:00:00
"""

CURRENT_DAY = [
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday",
    "sunday",
][datetime.now().weekday()]
SAVE_FILE = os.path.join(os.environ["HOME"], ".workweek.json")


def delta(moment):
    parts = [int(p) for p in moment.split(":")]
    if len(parts) < 2:
        parts.append(0)
    return timedelta(hours=parts[0], minutes=parts[1])


WEEK = delta("35")
DAY = delta("7:00")
PAUSE = delta("0:45")


def main(args):
    if args.end is None:
        res = args.start + DAY + args.pause
    else:
        res = args.end - args.start - args.pause
        if args.save:
            backup = Backup(SAVE_FILE)
            week = backup.load()
            week[CURRENT_DAY] = res
            backup.save(week)

    print(res)
    if args.save:
        print(sum(week.values(), timedelta(0)))


class Backup:
    def __init__(self, file):
        self.file = file

    def load(self):
        try:
            with open(self.file) as file:
                return {k: timedelta(seconds=v) for k, v in json.load(file).items()}
        except:
            return {}

    def save(self, data):
        with open(SAVE_FILE, "w") as file:
            json.dump({k: v.total_seconds() for k, v in data.items()}, file)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("start", type=delta)
    parser.add_argument("end", nargs="?", default=None, type=delta)
    parser.add_argument("pause", nargs="?", default=PAUSE, type=delta)
    parser.add_argument(
        "-s",
        "--save",
        action="store_true",
        help="save today's result and sum the total of the week",
    )
    return parser.parse_args()


if __name__ == "__main__":
    main(parse_args())

