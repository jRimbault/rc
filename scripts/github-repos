#!/usr/bin/env python3

import argparse
import json
import os
import sys
from urllib.request import urlopen, Request


def main(args):
    for repo in get_all_repos(args.user):
        print(repo)


def args(argv=sys.argv[1:]):
    p = argparse.ArgumentParser(description="Get the user's public repos")
    p.add_argument("user")
    return p.parse_args(argv)


def get_all_repos(user):
    repos = query_api(
        """
query ($user: String!, $cursor: String) {
 user(login: $user) {
  repositories(ownerAffiliations: OWNER, first: 30, orderBy: {field: NAME, direction: ASC}, after: $cursor) {
   nodes {
    name
   }
   pageInfo {
    hasNextPage
    endCursor
   }
  }
 }
}"""
    )
    result = GraphQlRepos(repos({"user": user}))
    yield from result.repos
    while result.hasNextPage:
        result = GraphQlRepos(repos({"user": user, "cursor": result.endCursor}))
        yield from result.repos


class GraphQlRepos:
    def __init__(self, data):
        self._data = data["user"]["repositories"]

    def _nodes(self):
        return self._data["nodes"]

    @property
    def hasNextPage(self):
        return self._data["pageInfo"]["hasNextPage"]

    @property
    def endCursor(self):
        return self._data["pageInfo"]["endCursor"]

    @property
    def repos(self):
        return (node["name"] for node in self._nodes())


def query_api(query):
    def do_query(variables=None):
        data = json.dumps({"query": query, "variables": variables})
        return request_graph_body(request, data)

    request = Request("https://api.github.com/graphql")
    request.add_header("Content-Type", "application/json; charset=utf-8")
    if "GITHUB_API_TOKEN" in os.environ:
        token = os.environ["GITHUB_API_TOKEN"]
        request.add_header("Authorization", f"token {token}")

    return do_query


def request_graph_body(request, data):
    request.add_header("Content-Length", len(data))
    return json.loads(urlopen(request, data.encode("utf-8")).read())["data"]


if __name__ == "__main__":
    try:
        sys.exit(main(args()))
    except KeyboardInterrupt:
        print()
