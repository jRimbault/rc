#!/usr/bin/env python3

import argparse
import json
import os
import sys
from urllib.request import Request, urlopen


def main(args):
    for repos in get_all_repos(args.user):
        print(repos, flush=True)


def parse_args(argv=sys.argv[1:]):
    p = argparse.ArgumentParser(description="Get the user's public repos")
    p.add_argument("user")
    return p.parse_args(argv)


def get_all_repos(user):
    class Repo:
        def __init__(self, node):
            self.name = node["name"]
            self.description = node["description"]

        def __repr__(self):
            if self.description is None:
                return self.name
            return f"{self.name:<30} {self.description[0:89]}"

    class Graph:
        def __init__(self, data):
            try:
                self.repositories = data["data"]["user"]["repositories"]
            except TypeError:
                self.repositories = data["data"]["organization"]["repositories"]
            self.has_next_page = self.repositories["pageInfo"]["hasNextPage"]
            self.end_cursor = self.repositories["pageInfo"]["endCursor"]

        def repos(self):
            yield from map(Repo, self.repositories["nodes"])

    data = """{
  repositories(ownerAffiliations: OWNER, first: 30, after: $cursor) {
   nodes {
    name
    description
   }
   pageInfo {
    hasNextPage
    endCursor
   }
  }
 }"""
    query = """query ($user: String!, $cursor: String) {
 user(login: $user) %s
 organization(login: $user) %s
}""" % (
        data,
        data,
    )
    query_repos = query_api(Graph, query)
    graph = query_repos({"user": user})
    yield from graph.repos()
    while graph.has_next_page:
        graph = query_repos({"user": user, "cursor": graph.end_cursor})
        yield from graph.repos()


def query_api(callable_type, query):
    def do_query(variables=None):
        data = json.dumps({"query": query, "variables": variables})
        request.add_header("Content-Length", len(data))
        response = urlopen(request, data.encode("utf-8"))
        return callable_type(json.loads(response.read()))

    request = Request("https://api.github.com/graphql")
    request.add_header("Content-Type", "application/json; charset=utf-8")
    if "GITHUB_API_TOKEN" in os.environ:
        token = os.environ["GITHUB_API_TOKEN"]
        request.add_header("Authorization", f"token {token}")

    return do_query


if __name__ == "__main__":
    try:
        sys.exit(main(parse_args()))
    except KeyboardInterrupt:
        print()
