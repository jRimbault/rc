#!/usr/bin/env python3

import argparse
import asyncio
import json
import os
import sys
from urllib.request import Request, urlopen


async def main(args):
    async for repos in get_all_repos(args.user):
        print("\n".join(map(str, repos)))


def args(argv=sys.argv[1:]):
    p = argparse.ArgumentParser(description="Get the user's public repos")
    p.add_argument("user")
    return p.parse_args(argv)


async def get_all_repos(user):
    class Repo:
        def __init__(self, name, description):
            self.name = name
            if description is None:
                description = ""
            self.description = description

        def __repr__(self):
            return f"{self.name:<30} {self.description[0:89]}"  # limit to 120 columns

    class Graph:
        def __init__(self, data):
            self.data = data["data"]["user"]["repositories"]
            self.hasNextPage = self.data["pageInfo"]["hasNextPage"]
            self.endCursor = self.data["pageInfo"]["endCursor"]

        def repos(self):
            yield from map(
                lambda n: Repo(n["name"], n["description"]), self.data["nodes"]
            )

    repos = query_api(
        Graph,
        """query ($user: String!, $cursor: String) {
 user(login: $user) {
  repositories(ownerAffiliations: OWNER, first: 30, after: $cursor) {
   nodes {
    name
    description
   }
   pageInfo {
    hasNextPage
    endCursor
   }
  }
 }
}""",
    )

    graph = await repos({"user": user})
    yield graph.repos()
    while graph.hasNextPage:
        graph = await repos({"user": user, "cursor": graph.endCursor})
        yield graph.repos()


def query_api(callable_type, query):
    async def do_query(variables=None):
        data = json.dumps({"query": query, "variables": variables})
        request.add_header("Content-Length", len(data))
        response = urlopen(request, data.encode("utf-8"))
        return callable_type(json.loads(response.read()))

    request = Request("https://api.github.com/graphql")
    request.add_header("Content-Type", "application/json; charset=utf-8")
    if "GITHUB_API_TOKEN" in os.environ:
        token = os.environ["GITHUB_API_TOKEN"]
        request.add_header("Authorization", f"token {token}")

    return do_query


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main(args()))
    except KeyboardInterrupt:
        print()
