#!/usr/bin/env python3

import argparse
import subprocess
import sys


def main(args):
    data = GitData(args.author, args.branch)
    data.parse(git_stats(data.author, data.branch))
    if args.csv or not sys.stdout.isatty():
        print(data.to_csv_line())
    else:
        print(data)
    return 0


class GitData:
    def __init__(self, author, branch):
        self.author = author
        self.branch = branch

    def parse(self, text):
        value = lambda l, i: int(l[i]) if len(l) > i else 0
        files, insertions, deletions = [], [], []
        for line in text.split("\n"):
            token = line.split()
            files.append(value(token, 0))
            insertions.append(value(token, 3))
            deletions.append(value(token, 5))
        self.files = sum(files)
        self.insertions = sum(insertions)
        self.deletions = sum(deletions)

    def __repr__(self):
        return "\n".join([
            f"{self.author} on {self.branch}",
            ", ".join([
                f"{self.files} files changed",
                f"{self.insertions} insertions(+)",
                f"{self.deletions} deletions(-)",
            ])
        ])

    def to_csv_line(self):
        return ";".join(map(str, [
            self.files,
            self.insertions,
            self.deletions,
            self.author,
            self.branch
        ]))


def git_stats(author, branch="master"):
    git = ["git", "log", f"--author={author}", "--shortstat", "--format=", branch]
    return subprocess.check_output(git, universal_newlines=True)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("author")
    parser.add_argument("branch", nargs="?", default="master")
    parser.add_argument(
        "--csv", "-c", action="store_true",
        help="files;insertions;deletions;author;branch"
    )
    try:
        sys.exit(main(parser.parse_args()))
    except KeyboardInterrupt:
        print()
